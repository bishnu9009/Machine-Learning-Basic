{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "13cf3136",
   "metadata": {},
   "source": [
    "<center><h1>Basic Python</h1></center>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93aa51b1",
   "metadata": {},
   "source": [
    "<h3>Question 1:- Write a Python program to check if a given number is prime or not.</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3ed9476e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the number to check:-\n",
      "65\n",
      "65 is not a prime\n"
     ]
    }
   ],
   "source": [
    "#Answer\n",
    "import math\n",
    "print(\"Enter the number to check:-\")\n",
    "num=int(input())\n",
    "count=0\n",
    "for i in range (2,int(math.sqrt(num))+1):\n",
    "    if num%i==0:\n",
    "        print(f'{num} is not a prime')\n",
    "        count+=1\n",
    "        break\n",
    "\n",
    "if count==0:\n",
    "    print(f'{num} is prime')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1caa5796",
   "metadata": {},
   "source": [
    "<h3>Question 2:- Write a function to input a number below 50 and print itâ€™s factorial.<h/h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b4f85fb1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a number below 50:- \n",
      "5\n",
      "factorial of 5 is 120..\n"
     ]
    }
   ],
   "source": [
    "#Answer\n",
    "import math\n",
    "\n",
    "def fact(inp):\n",
    "    if inp==0:\n",
    "        return 1;\n",
    "    else:\n",
    "        return fact(inp-1)*inp\n",
    "\n",
    "print(\"Enter a number below 50:- \")\n",
    "num=int(input())\n",
    "if num>50:\n",
    "    print(\"Number is greater than 50, please enter a number less than equal to 50.\")\n",
    "else:\n",
    "    n=fact(num)\n",
    "    print(f\"factorial of {num} is {n}..\")  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee998b78",
   "metadata": {},
   "source": [
    "<h3>Question 3:- Find the count of occurrence of each city in the dataset and create a dictionary such that the keys are the unique city names, and the values are their count of occurrence.</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a086e2da",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "agartala:\t1\n",
      "ahmedabad:\t43\n",
      "ajmer:\t2\n",
      "aligarh:\t4\n",
      "ambala:\t11\n",
      "amritsar:\t39\n",
      "baghpat:\t1\n",
      "bangalore:\t37\n",
      "bhopal:\t26\n",
      "bhubaneswar:\t13\n",
      "chandigarh:\t29\n",
      "chennai:\t36\n",
      "dehradun:\t17\n",
      "delhi and ncr:\t432\n",
      "guntur:\t4\n",
      "guwahati:\t5\n",
      "hyderabad:\t83\n",
      "indore:\t4\n",
      "jabalpur:\t38\n",
      "jaipur:\t74\n",
      "jalandhar:\t29\n",
      "jammu:\t2\n",
      "jodhpur:\t12\n",
      "kanpur:\t46\n",
      "kolkata:\t39\n",
      "kota:\t2\n",
      "lucknow:\t39\n",
      "meerut:\t45\n",
      "moradabad:\t7\n",
      "mumbai:\t70\n",
      "nagpur:\t88\n",
      "nellore:\t4\n",
      "patna:\t35\n",
      "pondicherry:\t5\n",
      "prayagraj:\t34\n",
      "pune:\t65\n",
      "raipur:\t6\n",
      "ranchi:\t12\n",
      "saharanpur:\t1\n",
      "shillong:\t2\n",
      "siliguri:\t3\n",
      "trichy:\t1\n",
      "vadodara:\t6\n",
      "varanasi:\t18\n",
      "vijyawada:\t1\n",
      "visakhapatnam:\t28\n"
     ]
    }
   ],
   "source": [
    "#Answer\n",
    "import csv\n",
    "\n",
    "city_count = {} #an empty dictionary to store the cities and their frequencies.\n",
    "\n",
    "with open('Dataset_Day1.csv','r') as file:\n",
    "    reader=csv.reader(file)\n",
    "    header=next(reader)\n",
    "    for row in reader:\n",
    "        city = row[0].lower()\n",
    "        if city in city_count: #if city already present in the dictionary then increment its count\n",
    "            city_count[city] += 1\n",
    "        else:\n",
    "            city_count[city] = 1 #else just add that value into the dictionary\n",
    "\n",
    "for i,j in city_count.items():\n",
    "    print(f\"{i}:\\t{j}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cebf32a3",
   "metadata": {},
   "source": [
    "<h3>Question 4:- Create a set of all the cities with at-least one Apollo hospital.</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5579d8d4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Kanpur', 'Jaipur', 'Hyderabad', 'Visakhapatnam', 'Delhi and NCR', 'Bangalore', 'Ahmedabad'}\n"
     ]
    }
   ],
   "source": [
    "#Answer\n",
    "import csv\n",
    "\n",
    "city_with_apollo=set() #empty set initalised to store the apollo hospital cities\n",
    "\n",
    "with open('Dataset_Day1.csv','r') as file:\n",
    "    reader=csv.reader(file)\n",
    "    header=next(reader)\n",
    "    for row in reader:\n",
    "        hospital_name=row[1].lower()\n",
    "        if 'apollo' in hospital_name and 'apollo' not in city_with_apollo:\n",
    "            city_with_apollo.add(row[0])\n",
    "    \n",
    "print(city_with_apollo)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
