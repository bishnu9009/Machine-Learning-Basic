{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7994bcba",
   "metadata": {},
   "source": [
    "<center><h1>Basic Dataframe Operations</h1></center>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa25e6ec",
   "metadata": {},
   "source": [
    "<h3>Question 1:- Find all unique values of columns: “name”, “mfr”, “vitamins” and store them in separate numpy arrays.</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1455ab8c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'A': 'American Home Food Products', 'G': 'General Mills', 'K': 'Kelloggs', 'N': 'Nabisco', 'P': 'Post', 'Q': 'Quaker Oats', 'R': 'Ralston Purina'}\n"
     ]
    }
   ],
   "source": [
    "# Data Preparation\n",
    "# we are given that the letters means the following brands.\n",
    "# A = American Home Food Products\n",
    "# G = General Mills\n",
    "# K = Kelloggs\n",
    "# N = Nabisco\n",
    "# P = Post\n",
    "# Q = Quaker Oats\n",
    "# R = Ralston Purina\n",
    "\n",
    "brands={'A':'American Home Food Products','G':'General Mills','K':'Kelloggs','N':'Nabisco','P':'Post','Q':'Quaker Oats','R':'Ralston Purina'}\n",
    "print(brands)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0a6655b6",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "UNIQUE PRODUCT NAMES:-\n",
      "['100% Bran' '100% Natural Bran' 'All-Bran' 'All-Bran with Extra Fiber'\n",
      " 'Almond Delight' 'Apple Cinnamon Cheerios' 'Apple Jacks' 'Basic 4'\n",
      " 'Bran Chex' 'Bran Flakes' \"Cap'n'Crunch\" 'Cheerios'\n",
      " 'Cinnamon Toast Crunch' 'Clusters' 'Cocoa Puffs' 'Corn Chex'\n",
      " 'Corn Flakes' 'Corn Pops' 'Count Chocula' \"Cracklin' Oat Bran\"\n",
      " 'Cream of Wheat (Quick)' 'Crispix' 'Crispy Wheat & Raisins' 'Double Chex'\n",
      " 'Froot Loops' 'Frosted Flakes' 'Frosted Mini-Wheats'\n",
      " 'Fruit & Fibre Dates; Walnuts; and Oats' 'Fruitful Bran' 'Fruity Pebbles'\n",
      " 'Golden Crisp' 'Golden Grahams' 'Grape Nuts Flakes' 'Grape-Nuts'\n",
      " 'Great Grains Pecan' 'Honey Graham Ohs' 'Honey Nut Cheerios' 'Honey-comb'\n",
      " 'Just Right Crunchy  Nuggets' 'Just Right Fruit & Nut' 'Kix' 'Life'\n",
      " 'Lucky Charms' 'Maypo' 'Muesli Raisins; Dates; & Almonds'\n",
      " 'Muesli Raisins; Peaches; & Pecans' 'Mueslix Crispy Blend'\n",
      " 'Multi-Grain Cheerios' 'Nut&Honey Crunch' 'Nutri-Grain Almond-Raisin'\n",
      " 'Nutri-grain Wheat' 'Oatmeal Raisin Crisp' 'Post Nat. Raisin Bran'\n",
      " 'Product 19' 'Puffed Rice' 'Puffed Wheat' 'Quaker Oat Squares'\n",
      " 'Quaker Oatmeal' 'Raisin Bran' 'Raisin Nut Bran' 'Raisin Squares'\n",
      " 'Rice Chex' 'Rice Krispies' 'Shredded Wheat' \"Shredded Wheat 'n'Bran\"\n",
      " 'Shredded Wheat spoon size' 'Smacks' 'Special K'\n",
      " 'Strawberry Fruit Wheats' 'Total Corn Flakes' 'Total Raisin Bran'\n",
      " 'Total Whole Grain' 'Triples' 'Trix' 'Wheat Chex' 'Wheaties'\n",
      " 'Wheaties Honey Gold']\n",
      "\n",
      "UNIQUE MANUFACTURERS:-\n",
      "['N' 'Q' 'K' 'R' 'G' 'P' 'A']\n",
      "\n",
      "UNIQUE VITAMIN VALUES:-\n",
      "[ 25   0 100]\n"
     ]
    }
   ],
   "source": [
    "#Answer\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "df = pd.read_csv('Dataset_Day2.csv') #creating the required dataframe from the csv file.\n",
    "\n",
    "\n",
    "#for unique name\n",
    "unique_name = pd.unique(df['name'])    #this creates a panda series of the unique values present in the 'name' row.\n",
    "\n",
    "unique_name_np = np.array(unique_name) # this creates a numpy array of the above panda series so that it is easier to use.\n",
    "#-------------------------------------------------------------------------------------------------------------------------------\n",
    "#for unique manufacturer\n",
    "unique_mfr = pd.unique(df['mfr'])     #similar to the name ....\n",
    "\n",
    "unique_mfr_np = np.array(unique_mfr)  #similar to the name ....\n",
    "#-------------------------------------------------------------------------------------------------------------------------------\n",
    "#for unique vitamins\n",
    "unique_vits = pd.unique(df['vitamins']) #similar to the above ....\n",
    "\n",
    "unique_vits_np = np.array(unique_vits)  #similar to the above ....\n",
    "\n",
    "print(f'\\nUNIQUE PRODUCT NAMES:-\\n{unique_name_np}')\n",
    "print(f'\\nUNIQUE MANUFACTURERS:-\\n{unique_mfr_np}')\n",
    "print(f'\\nUNIQUE VITAMIN VALUES:-\\n{unique_vits_np}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "dc183027",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unique Brand Full Names:-\n",
      "\n",
      "Nabisco\n",
      "Quaker Oats\n",
      "Kelloggs\n",
      "Ralston Purina\n",
      "General Mills\n",
      "Post\n",
      "American Home Food Products\n"
     ]
    }
   ],
   "source": [
    "#Using the prepared data dictionary to map the brand's initials to their full name.\n",
    "\n",
    "brand_names = [brands.get(letter,letter) for letter in unique_mfr] # this is a list which contains the brand's full names \n",
    "                                                                   # which are unique, the \n",
    "\n",
    "print(\"Unique Brand Full Names:-\\n\")\n",
    "for brand in brand_names:\n",
    "    print(brand)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce182a2f",
   "metadata": {},
   "source": [
    "NOTE:-<br>\n",
    "\".get(letter, letter)\" : This method is used to retrieve the corresponding brand name from the dictionary based on the provided letter. If the letter is found in the dictionary, it returns the corresponding brand name. If the letter is not found, it returns the letter itself. This ensures that if a letter is not present in the dictionary (i.e., not mapped to any brand name), the original letter is used instead."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66096dd4",
   "metadata": {},
   "source": [
    "<h3>Question 2:- Create a new dataframe with all columns for which ‘sodium’ is greater than 100 AND ‘protein’ is less than 3 Name this dataframe:  df_HighSodLowProt.\n",
    "</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "42c463ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Answer\n",
    "\n",
    "df_HighSodLowProt = df[(df['sodium'] > 100) & (df['protein'] < 3)].copy() # we use the .copy() command to avoid unintentional \n",
    "                                                                          # changes to the original dataframe"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7acd08df",
   "metadata": {},
   "source": [
    "<h3>Question 3:- From the dataframe in (Q2) print the average ‘calories’ by ‘mfr’  and also print the ‘mfr’ with the highest average ‘calories’.\n",
    "</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "a8135e59",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mfr\n",
      "G    109.230769\n",
      "K    110.000000\n",
      "P    110.000000\n",
      "Q    120.000000\n",
      "R    104.000000\n",
      "Name: calories, dtype: float64\n",
      "Q\n"
     ]
    }
   ],
   "source": [
    "#Answer\n",
    "\n",
    "avg_calories_by_mfr = df_HighSodLowProt.groupby('mfr')['calories'].mean()\n",
    "\n",
    "highest_avg_calories = avg_calories_by_mfr.idxmax()\n",
    "\n",
    "print(avg_calories_by_mfr)\n",
    "print(highest_avg_calories)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "127eba84",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mfr\n",
      "General Mills     109.230769\n",
      "Kelloggs          110.000000\n",
      "Post              110.000000\n",
      "Quaker Oats       120.000000\n",
      "Ralston Purina    104.000000\n",
      "Name: calories, dtype: float64\n",
      "Manufacturer with the highest average calories: Quaker Oats\n"
     ]
    }
   ],
   "source": [
    "#Answer version 2\n",
    "df_HighSodLowProt['mfr'] = df_HighSodLowProt['mfr'].map(brands)\n",
    "\n",
    "avg_calories_by_mfr = df_HighSodLowProt.groupby('mfr')['calories'].mean()   # Calculate the average calories by 'mfr'\n",
    "\n",
    "print(avg_calories_by_mfr)                                                  # Print the average calories by 'mfr'\n",
    "\n",
    "\n",
    "mfr_highest_avg_calories = avg_calories_by_mfr.idxmax()  # Find the 'mfr' with the highest average calories, .idxmax() function\n",
    "                                                         # gives the index of the highest value in the given axis/column.\n",
    "\n",
    "print(\"Manufacturer with the highest average calories:\", mfr_highest_avg_calories) # Print the 'mfr' with the\n",
    "                                                                                   # highest average calories"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
